/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,



  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

const todos = [
  {
    id: 1,
    title: `Update knowledge`,
    completed: false,
    description: `this is description`,
  },
];

/*  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos */
app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
// Description: Returns a specific todo item identified by its ID.
// Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
// Example: GET http://localhost:3000/todos/123

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  // console.log(typeof id);
  const todo = todos.find((obj) => obj.id === Number(id));
  if (todo) res.status(200).json(todo);
  else res.status(404).json(`Not found`);
});

/*     
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, "description": "I should buy groceries" }*/

app.post("/todos", (req, res) => {
  const id = Date.now() % 1000000;
  const bdy = req.body;
  /*  const newObj = {};
  newObj.title = bdy.title;
  newObj.completed = bdy.completed;
  newObj.description = bdy.description;
  newObj.id = id;*/

  todos.push({
    title: bdy.title,
    completed: bdy.completed,
    description: bdy.description,
    id: id,
  });
  res.status(201).json({ id });
});

/*    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true } */

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const bdy = req.body;
  /*let isFound = false;
  todos.forEach((obj) => {
    if (obj.id === Number(id)) {
      obj.title = bdy.title;
      obj.completed = bdy.completed;
      isFound = true;
    }
  });*/
  const idx = todos.findIndex((obj) => obj.id === Number(id));
  if (idx != -1) {
    todos[idx].title = bdy.title;
    todos[idx].completed = bdy.completed;
    res.status(200).json("OK");
  } else {
    res.status(404).json(`Not Found`);
  }
});

/*5. DELETE /todos/:id - Delete a todo item by ID
Description: Deletes a todo item identified by its ID.
Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
Example: DELETE http://localhost:3000/todos/123  */
app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  const index = todos.findIndex((todo) => todo.id === Number(id));

  if (index !== -1) {
    todos.splice(index, 1);
    return res.status(200).json("Deleted!");
  }

  res.status(404).json("Not found!");
});

/*- For any other route not defined in the server return 404*/
app.get("*", (req, res) => {
  res.status(404).send("Not correct route");
});
app.put("*", (req, res) => {
  res.status(404).send("Not correct route");
});
app.post("*", (req, res) => {
  res.status(404).send("Not correct route");
});
app.delete("*", (req, res) => {
  res.status(404).send("Not correct route");
});

app.listen(4000);

module.exports = app;
